const Webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const path = require('path');
const opn = require('opn');
const MFS = require('memory-fs')
const serve = require('koa-better-serve');

const webpackConfig = require('./client.config');
const serverWebpackConfig = require('./server.config');
const port = webpackConfig.devServer.port;

const url = `http://127.0.0.1:${port}`;

// entry live reloading
for (let name in webpackConfig.entry) {
  webpackConfig.entry[name].unshift(`webpack-dev-server/client?${url}`, 'webpack/hot/dev-server');
}

const clientCompiler = Webpack(webpackConfig);
const serverCompiler = Webpack(serverWebpackConfig);

clientCompiler.watch({}, (err, stats) => {
  if (err) throw err
  stats = stats.toJson()
  stats.errors.forEach(err => console.error(err))
  stats.warnings.forEach(err => console.warn(err))
  //console.log("serverPath",webpackConfig.output.path)
})

serverCompiler.watch({}, (err, stats) => {
  if (err) throw err
  stats = stats.toJson()
  stats.errors.forEach(err => console.error(err))
  stats.warnings.forEach(err => console.warn(err))

  //console.log("serverPath",serverWebpackConfig.output.path)
  // read bundle generated by vue-ssr-webpack-plugin
//     const bundlePath = path.join(serverConfig.output.path, 'vue-ssr-server-bundle.json')
//     bundle = JSON.parse(mfs.readFileSync(bundlePath, 'utf-8'))
//     if (template) {
//         console.log('ok')
//         cb(bundle, template)
// }
})

// webpack dev server
const server = new WebpackDevServer(clientCompiler, Object.assign({
  stats: {
    colors: true,
    chunks: true
  }
}, webpackConfig.devServer));

server.listen(port, function (err) {
  if (err) {
    console.error(err);
    return;
  }

  console.log(`Starting server on ${url}`);

  opn(path.join(url, '/'));
});


/*setTimeout(function () {
  const fs = require('fs');
  const { createBundleRenderer } = require('vue-server-renderer')

  const mfs = new MFS();
  const bundlePath = path.join(serverWebpackConfig.output.path, 'vue-ssr-server-bundle.json')
  let serverBundle = JSON.parse(mfs.readFileSync(bundlePath, 'utf-8'))
  const clientManifestPath = path.join(webpackConfig.output.path, 'vue-ssr-client-manifest.json')
//const template = fs.readFileSync('/path/to/template.html', 'utf-8')
//const serverBundle = require('/path/to/vue-ssr-server-bundle.json')
  const clientManifest = JSON.parse(mfs.readFileSync(bundlePath, 'utf-8'))

  console.log(clientManifest)
}, 7000)*/

const start = function () {
  const fs = require('fs');

  const Koa = require('koa');
  const KoaRuoter = require('koa-router')
  const { createBundleRenderer } = require('vue-server-renderer')
  const LRU = require('lru-cache')

  const resolve = file => path.resolve(__dirname, file)
  const app = new Koa()
  const router = new KoaRuoter()

  function createRenderer (bundle, options) {
    return createBundleRenderer(
      bundle,
      Object.assign(options, {
        cache: LRU({
          max: 1000,
          maxAge: 1000 * 60 * 15
        }),
        basedir: resolve('./dist'),
        runInNewContext: false
      })
    )
  }

  let renderer
  const template = fs.readFileSync(resolve('../dist/index.html'), 'utf-8')
  /*console.log('template')
  console.log(template)
  console.log('template')*/
  const bundle = require('../dist/vue-ssr-server-bundle.json')
  const clientManifest = require('../dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    runInNewContext: false, // 推荐
    template,
    clientManifest
  })

  /**
   * 渲染函数
   * @param ctx
   * @param next
   * @returns {Promise}
   */
  function render (ctx, next) {
    //console.log(ctx.path)
    ctx.set("Content-Type", "text/html; charset=utf-8")
    return new Promise (function (resolve, reject) {
      const handleError = err => {
        if (err && err.code === 404) {
          ctx.status = 404
          ctx.body = '404 | Page Not Found'
        } else {
          ctx.status = 500
          ctx.body = '500 | Internal Server Error1'
          console.error(`error during render : ${ctx.url}`)
          console.error(err.stack)
        }
        resolve()
      }
      const context = {
        title: 'Vue Ssr 2.3',
        url: ctx.url
      }
      //console.log(ctx.url)
      renderer.renderToString(context, (err, html) => {
        if (err) {
          //return handleError(err)
          resolve();
        }
        //context.renderScripts()
        /*console.log('html')
        console.log(html)
        console.log('html')*/
        ctx.body = html
        resolve()
      })
    })
  }

//app.use();
//app.use(serve('dist', path.join(__dirname, '..', 'dist')));
//app.use(serve('/public', '../public', true))
  /*app.use(async (ctx, next) => {
    if(/\.html$/.test(ctx.path)){
    }else{
      await send(ctx, ctx.path, { root: path.resolve(__dirname + '..') });
    }
    await next();
  })*/
//app.use('/dist', serve('./dist'))
//app.use(serve('./src/store', '/images'))
//app.use(serve('./dist', '/dist', {}))
  router.get('/dist', (ctx, next) => {
    console.log(ctx.path)
    ctx.body = '123'
    resolve()
  })
  router.get('*', render)


  app.use(router.routes()).use(router.allowedMethods())

  const port1 = 8089
  app.listen(port1, '127.0.0.1', () => {
    console.log(`server started at localhost:${port1}`)
  })
}

start();




